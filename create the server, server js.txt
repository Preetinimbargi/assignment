const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const app = express();

mongoose.connect('mongodb://localhost:27017/authSystem', { useNewUrlParser: true, useUnifiedTopology: true });

app.use(cors());
app.use(express.json());

const userSchema = new mongoose.Schema({
  name: String,
  dateOfBirth: Date,
  email: String,
  password: String
});

const User = mongoose.model('User', userSchema);

const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

app.post('/api/register', async (req, res) => {
  const { name, dateOfBirth, email, password } = req.body;

  const hashedPassword = await bcrypt.hash(password, 10);
  const user = new User({ name, dateOfBirth, email, password: hashedPassword });

  await user.save();

  const token = jwt.sign({ userId: user._id }, 'secretKey');
  res.json({ token, name: user.name, email: user.email, dateOfBirth: user.dateOfBirth });
});

app.post('/api/login', async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });
  if (!user) {
    return res.status(400).json({ error: 'Invalid email or password' });
  }

  const isPasswordValid = await bcrypt.compare(password, user.password);
  if (!isPasswordValid) {
    return res.status(400).json({ error: 'Invalid email or password' });
  }

  const token = jwt.sign({ userId: user._id }, 'secretKey');
  res.json({ token, name: user.name, email: user.email, dateOfBirth: user.dateOfBirth });
});

app.listen(5000, () => {
  console.log('Server is running on port 5000');
});
